// Code generated by gencheck
// DO NOT EDIT!

package benchmark

import (
	"errors"
	"strings"

	"github.com/abice/gencheck"
)

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s SingleString) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 1)

	// BEGIN Entry Validations
	// required
	if s.Entry == "" {
		vErrors = append(vErrors, gencheck.NewFieldError("SingleString", "Entry", "required", errors.New("is required")))
	}
	// END Entry Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s TestContainsAny) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 1)

	// BEGIN Any Validations
	// containsany
	if !strings.ContainsAny(s.Any, "@#!") {
		vErrors = append(vErrors, gencheck.NewFieldError("TestContainsAny", "Any", "containsany", errors.New("Any did not contain any of @#!")))
	}
	// END Any Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s TestHex) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 1)

	// BEGIN Value Validations
	// hex
	if err := gencheck.IsHex(&s.Value); err != nil {
		vErrors = append(vErrors, gencheck.NewFieldError("TestHex", "Value", "hex", err))
	}
	// END Value Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s TestMap) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 1)

	// BEGIN Value Validations
	// contains
	if _, foundValue := s.Value["test"]; !foundValue {
		vErrors = append(vErrors, gencheck.NewFieldError("TestMap", "Value", "contains", errors.New("Value did not contain test")))
	}
	// END Value Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s TestString) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 4)

	// BEGIN Required Validations
	// required
	if s.Required == "" {
		vErrors = append(vErrors, gencheck.NewFieldError("TestString", "Required", "required", errors.New("is required")))
	}
	// END Required Validations

	// BEGIN Len Validations
	// len
	if !(len(s.Len) == 10) {
		vErrors = append(vErrors, gencheck.NewFieldError("TestString", "Len", "len", errors.New("length mismatch")))
	}
	// END Len Validations

	// BEGIN Min Validations
	// min
	if len(s.Min) < 5 {
		vErrors = append(vErrors, gencheck.NewFieldError("TestString", "Min", "min", errors.New("length failed check for min=5")))
	}
	// END Min Validations

	// BEGIN Max Validations
	// max
	if len(s.Max) > 100 {
		vErrors = append(vErrors, gencheck.NewFieldError("TestString", "Max", "max", errors.New("length failed check for max=100")))
	}
	// END Max Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}

// Validate is an automatically generated validation method provided by
// gencheck.
// See https://github.com/abice/gencheck for more details.
func (s TestUUID) Validate() error {

	vErrors := make(gencheck.ValidationErrors, 0, 1)

	// BEGIN UUID Validations
	// required
	if s.UUID == "" {
		vErrors = append(vErrors, gencheck.NewFieldError("TestUUID", "UUID", "required", errors.New("is required")))
	}
	// END UUID Validations

	if len(vErrors) > 0 {
		return vErrors
	}

	return nil
}
