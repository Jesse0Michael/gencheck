// Code generated by go-bindata.
// sources:
// template/bcp47.tmpl
// template/contains.tmpl
// template/containsany.tmpl
// template/dive.tmpl
// template/gt.tmpl
// template/gte.tmpl
// template/hex.tmpl
// template/len.tmpl
// template/lt.tmpl
// template/lte.tmpl
// template/main.tmpl
// template/max.tmpl
// template/min.tmpl
// template/notnil.tmpl
// template/required.tmpl
// template/uuid.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBcp47Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\xaf\x02\x37\xeb\x65\xd7\xbe\x04\x02\x29\xb9\xb4\xb4\xd0\x4b\xc9\xa1\xf4\xb2\x2c\x44\xb1\x46\xde\xa1\x5a\xc9\x95\x44\xda\x20\xf4\xdf\x8b\xe4\xa4\xdd\x2d\x29\xb9\x99\xc1\x7a\xef\x7b\x33\x2f\xa5\x61\xdd\x00\xef\x3f\xdc\x5e\x5e\x7d\x93\x86\x95\x8c\xce\x63\x22\x4b\x5e\x46\x0a\x18\x9d\x22\xc4\x83\x8c\xf8\xc9\xc6\xe0\x81\x3c\xeb\x47\xb0\x86\x84\x66\x32\x0a\x1c\x20\x97\xe7\x18\xdd\x71\x96\x91\xef\x0d\x21\x44\xcf\x76\x6a\x80\x43\x8c\x73\xb8\x1e\x86\xe8\x9c\x09\x3d\x53\xd4\xbd\xf3\xd3\x70\x88\x47\x33\xdc\x8f\xf3\xe5\x55\xb3\x1e\x72\x6e\x52\x52\xa4\xd9\x12\x44\x1d\x8a\x3a\x2a\x36\xf4\x03\xfd\xa7\x62\xf4\xf5\x71\x26\x88\x45\x57\x40\xac\x9f\xbf\xb6\x39\x37\xe5\x3f\xef\x71\x7d\x53\xc0\xc7\x03\x8d\xdf\xfb\xcf\xa1\x32\xad\x52\x62\x0d\xeb\x22\x56\x1c\x6e\xa3\x47\x8f\x2e\xe7\xb7\x29\x91\x55\x39\x87\x3e\xa5\x45\xfd\x8b\x3c\x52\xce\xdd\xbb\xaa\xf3\xe6\x06\x96\x0d\x52\x03\xa4\x04\xa9\xd4\x47\xef\x5d\x79\x2a\xc8\x7b\x81\x9c\x9b\x4a\x47\x26\xd0\x0b\x88\xbb\xfd\x1f\xc8\xdd\xfe\x0c\x53\x3b\x0f\xb6\x8a\x7e\x6d\x10\xd8\x4e\x86\xce\xdd\x0b\xbf\x97\x76\x22\xfc\xcb\x55\x51\x5e\x0b\xf9\x3f\x8c\x93\xb8\x2f\x98\xbe\x16\x79\x35\x7b\xb6\x51\xe3\x4e\x1f\x63\x5f\x87\x7a\x25\xda\x36\xec\xda\x56\xed\xb1\x45\xdb\x06\xb1\x39\x4f\xd5\x86\x4d\xd1\xec\xee\xf0\xd7\xa8\x2b\x5b\x03\x4e\x37\xb7\x9c\xf8\xa9\x69\xec\xec\xe2\xf8\xec\xb7\xf4\xa0\xb4\xab\x1c\xef\xa1\x34\x13\xce\x3e\x75\xee\xa2\x0d\x68\xc3\x85\x38\x31\x38\xc9\xde\x2d\xd2\x35\x72\x93\xd2\x16\x64\x55\xdd\xff\xef\x00\x00\x00\xff\xff\x42\x36\x4a\x70\xec\x02\x00\x00")

func templateBcp47TmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBcp47Tmpl,
		"template/bcp47.tmpl",
	)
}

func templateBcp47Tmpl() (*asset, error) {
	bytes, err := templateBcp47TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/bcp47.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateContainsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcf\x6e\x9c\x40\x0c\x87\xef\x3c\xc5\x2f\x23\xa1\x40\x94\xf0\x00\x95\x38\x55\xed\x31\xca\xa1\xb7\x24\xaa\xa6\x1d\x0f\xb2\xca\x0e\xdb\x19\xb6\x55\x65\xf9\xdd\xab\x81\x85\xfd\xc7\x35\x37\x6b\xb0\x3f\xdb\x9f\x29\x44\x1c\x79\x0e\x04\xf3\x73\x08\xa3\xe5\x90\x8c\x6a\x21\x02\xf6\xa0\xdf\x68\xbe\x32\xf5\xee\xdb\xbf\x3d\xc1\xa4\x31\x72\xe8\x0c\xcc\xc3\x12\x3d\xad\xa9\x9c\x5e\xc6\x88\x06\xaa\xec\x91\x1a\x91\xb9\xf0\xd9\xee\x48\x15\x77\x2d\x02\xf7\x02\x11\x50\x70\x53\x19\x7b\xdc\xcd\x98\xd4\x7c\x3e\x76\xae\x44\xd8\xa3\x5a\x58\xb5\xea\x83\x08\x05\xa7\x7a\x4d\x7c\x84\x11\x69\x5e\x6c\xb4\x3b\x55\x53\x4b\x81\xcc\xb6\xce\x7d\x89\x71\xc8\xb5\xd5\x3e\x72\x18\x3d\x0c\xe5\x87\xd4\x3c\xd3\xdf\xea\xcd\x94\x09\x8e\x1d\xc2\x30\xe2\xb8\x2d\xca\xf4\x66\x6a\x83\x13\x1c\x33\xb6\x86\x6a\x71\xb5\x9d\x2a\xa6\x97\x65\x87\x1c\xf6\x89\x36\x54\xbd\xbe\xaf\xb2\x5e\xdf\x2f\x74\xf9\xe1\x10\xdc\x95\x9e\x4f\x2d\xbc\xed\x13\x15\x7e\x88\xf8\xfe\x88\xc4\xa1\xeb\xe9\x36\x29\xda\xd0\xd1\xad\xdd\xbc\x3d\xfb\x0b\x23\x68\x5b\x4c\x32\x6f\xe6\x5a\x86\x39\x73\xbb\xd1\x2d\x23\x81\xad\x59\x5b\x8c\xf1\x40\xd3\xe7\x1f\x91\xec\xaf\x02\xc8\x9e\xf2\x39\xb7\xd2\x3f\xf4\x32\x93\xfc\xf9\x0e\x1d\x05\x8a\x76\xe4\x21\xcc\x7d\xd6\x2e\xcb\x5f\x0d\x4e\x13\xfd\x8f\xed\xd9\x61\x08\xf0\x19\x8b\xfb\x32\xa1\x4c\xf7\x97\x6d\x56\x61\xf5\x4c\x7f\x3a\xbb\xf8\x29\xfe\x1f\x00\x00\xff\xff\x79\xdf\x94\x7e\x3b\x03\x00\x00")

func templateContainsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateContainsTmpl,
		"template/contains.tmpl",
	)
}

func templateContainsTmpl() (*asset, error) {
	bytes, err := templateContainsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/contains.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateContainsanyTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x89\xc0\xc4\x0e\x7f\xfc\x06\xff\xa1\x94\xf6\x18\x72\xe8\x31\x17\x51\xad\xc2\x82\xb3\x4e\x25\xd3\x62\x96\x7d\xf7\xe2\x28\x71\xd2\xdc\x86\xc5\x33\xdf\x8c\x55\xa9\x06\x8a\x2c\x04\xf7\x39\xc8\xe8\x59\xb2\x97\xc9\x99\x55\xaa\xe0\x08\xfa\x42\xf7\xce\xd4\x87\x8f\xe9\x4c\x70\x79\x4c\x2c\x47\x07\xb7\xb9\xa9\xed\xf2\x29\xe7\xfd\x98\xd0\xc1\x8c\x23\x72\xa7\x5a\x8c\x3b\x7f\x22\x33\xac\xfe\x43\xb8\x57\xa8\x82\x24\x5c\x6c\x1c\xb1\x2a\x31\xb9\x7b\xbd\xc2\x5f\x64\x6a\x54\x39\xa2\xb9\xc5\xb5\x66\x1b\x55\x92\x60\xf6\x1c\xfa\x0f\x4e\xb5\xdb\xfb\xe4\x4f\x66\xae\xd5\x0a\x73\xbc\x0f\xe1\x2d\xa5\x61\xf6\x36\xe7\xc4\x32\x46\x38\x9a\x0f\xb9\xdb\xd1\x4f\x73\x70\x75\x46\xe0\x00\x19\x46\x5c\x37\xc3\xcb\x84\x21\xa2\xce\x07\xd7\x3a\xdc\x19\x28\xe9\x2d\xcc\xaa\xa7\x9d\x66\xb8\x5c\x6e\x6b\x66\xd9\x67\x42\x91\x47\x12\x4a\x7e\xe4\x41\x4a\x97\xa5\xc9\xc3\x5f\x06\xe7\x4b\x89\x6f\xdf\x73\xc0\x20\x88\x33\x16\xeb\x3a\xa3\xce\xeb\xbf\x35\x96\x37\x68\x0b\x60\xfb\xc0\xbd\xeb\xdf\x00\x00\x00\xff\xff\x14\x2e\x29\x40\xce\x01\x00\x00")

func templateContainsanyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateContainsanyTmpl,
		"template/containsany.tmpl",
	)
}

func templateContainsanyTmpl() (*asset, error) {
	bytes, err := templateContainsanyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/containsany.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDiveTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\x3b\x31\x10\xc5\xef\xfd\x14\xef\x1f\x28\xdd\x2d\xec\xf6\xfe\x97\xde\xd4\xa3\x08\x8a\xf7\xb0\x99\xd4\xc1\x98\x2d\x93\x58\x91\x21\xdf\x5d\xb2\xdb\x76\x45\x6f\x2f\xc3\x9b\x37\xbf\x3c\xd5\xdd\x16\x8e\x4f\x84\x4f\x0e\x01\x83\x0d\x01\x07\x8a\xc3\x2b\x0d\x6f\x38\xd9\xc0\xce\x66\xc2\x18\x61\x91\xb2\x7c\x0c\x19\xdb\x1d\xba\x52\x56\xaa\x8e\x3c\x47\x82\xa9\xdb\x66\x9a\x80\x3d\x46\x41\xc3\xe9\x69\xf6\xf6\xed\xf2\x78\xcc\x52\xdf\xdd\xd5\xc9\x69\x1a\xa1\x14\xf6\x48\xbd\x6a\x7f\xcf\x14\xdc\x83\x7d\xa7\x52\xf0\x6f\x8f\xc8\x01\x0a\xd5\x0e\x14\xdd\xb4\xc8\x1e\x24\x82\xff\xfb\x2b\x63\xff\x72\x66\x6c\x7e\x27\xb4\x37\x93\xf7\x92\xb3\x02\x54\x61\x9d\xbb\x13\x19\xeb\x59\x43\x22\x06\xa5\xac\xfe\xf2\x14\xd5\xcb\x45\x55\x50\x48\x84\x59\x1e\x28\x92\xd8\xcc\x63\x9c\x53\x9a\xa3\x70\xcc\x1e\xe6\xb6\x36\xc8\x09\x71\xcc\x73\x6b\xb5\x32\x5f\x61\xb0\x59\x27\xac\xd3\xc6\x60\x81\x3b\xcb\xe7\xaf\x23\xb5\x73\xf2\xf2\xc5\x9f\xfa\x3b\x00\x00\xff\xff\xe7\xd7\x61\x52\x9d\x01\x00\x00")

func templateDiveTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDiveTmpl,
		"template/dive.tmpl",
	)
}

func templateDiveTmpl() (*asset, error) {
	bytes, err := templateDiveTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dive.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateGtTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x2f\x62\x03\x52\xd8\xe8\x07\x2c\xe4\x10\x96\xf6\x18\x72\x48\x6f\x81\xe0\xc6\xa3\x22\xb0\xec\x54\x12\xa4\x65\xd0\x7f\x2f\x96\x93\xc6\x4a\x29\xf4\xd2\x9b\x99\x19\xbf\x37\xdf\xd3\x30\xa3\x21\x63\x3b\x82\x78\x89\x02\xcb\x94\x2a\x66\x58\x03\x7a\x85\x8c\xde\xba\xad\x27\x63\xdf\x20\x16\x02\xfa\xd1\x52\xdb\xec\xde\x4f\xa4\x20\xa2\x75\xa4\x77\xd6\xd1\xf8\x13\xc0\xbc\x44\x24\x77\x6a\xeb\x98\xc5\x0e\x63\x53\x63\x94\xa4\x36\xd0\x45\x7e\x3a\xe7\x6c\x37\xcc\x5c\x1b\xd4\x35\x5f\xbe\xab\xaa\x58\xf2\x70\x33\x65\xfe\x53\x1f\x8f\x14\x42\xef\xf1\x6f\x05\x79\xf2\xb6\x8b\x06\x22\xe8\x79\xb8\xae\xbb\xa9\x1d\xa9\x09\x97\x0d\xdb\xe8\xf3\x56\xd6\x60\x22\x90\x12\x66\x2b\x74\xb6\x05\xe3\xe2\x3e\xcd\x42\x08\xe8\x6d\xed\x6b\x97\xa5\x22\xf3\x4d\x3d\xa5\xc1\x3c\xe7\xb1\xe9\xcf\x52\xe9\xa7\xdd\x7f\xa9\x2a\x6b\x30\x2b\x2c\x53\x92\x8b\xc2\x50\x31\x0f\xa9\xa4\x54\x54\x99\xb3\xb5\x5e\x9b\x48\x5e\xde\x39\x29\x70\x8e\x1a\x75\xd3\x3c\x78\xdf\x0f\x24\x9f\xd8\x34\x14\x82\xde\xd0\x59\xee\x85\x0d\x78\x26\xd3\x7b\xc2\x3c\xec\x85\x12\x10\x5d\x7f\x16\x6a\x78\x8d\x4b\xbc\xd9\xba\x02\x7e\x00\xa3\xd7\x4d\x23\x99\xc7\x04\x52\x52\x15\xf0\x8b\x78\xdf\x02\x1a\x17\x75\x2e\x9a\x12\x70\x20\xfc\x8b\x38\x0f\xaa\x7c\xf5\x8c\x77\x7f\x58\xe5\x11\xa4\x49\x73\x3a\xf7\x11\x00\x00\xff\xff\x99\x33\xf4\x4c\x18\x03\x00\x00")

func templateGtTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGtTmpl,
		"template/gt.tmpl",
	)
}

func templateGtTmpl() (*asset, error) {
	bytes, err := templateGtTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gt.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateGteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x6f\xc5\x06\xa4\xb0\xd1\x0f\x58\xc8\xa1\x2d\xed\x31\xe4\x90\xde\x02\xc1\x8d\x47\x45\x60\xd9\xa9\x24\x48\xcb\xa0\xff\x5e\x64\x25\x8d\x9d\x12\xe8\xa5\x37\x31\x92\xde\x9b\xef\xcd\x30\xa3\x21\x63\x3b\x82\x78\x8d\x24\xb0\x48\xa9\x62\x86\x35\xa0\x37\xc8\xe8\xad\x5b\x7b\x32\xf6\x1d\x62\x2e\xa0\x9f\x2c\xb5\xcd\xe6\xe3\x40\x0a\x22\x5a\x47\x7a\x63\xdd\xe9\x13\xc0\x8c\x48\xee\xd0\xd6\xb1\x88\xed\xca\xa5\x46\x91\xa4\x36\xd0\x49\x7e\x31\x7a\xe8\x6c\x97\xdf\x9c\x2f\xa8\x6b\xbe\x9d\xab\x6a\xda\xe5\xee\xe2\xca\xfc\xb7\xde\xef\x29\x84\xde\xe3\xff\x12\xf2\xe0\x6d\x17\x0d\x44\xd0\xb3\x70\xee\x77\x55\x3b\x52\x23\x30\x1b\xd6\xd1\x97\xb6\xac\xc1\x48\x21\x25\xfc\x59\xa2\xb3\x2d\x18\xcc\x97\x4e\x4a\x18\x42\x40\xaf\x6b\x5f\xbb\xfc\x31\x32\x5f\xc4\x53\xca\xde\x43\x1e\xab\xfe\x28\x95\x7e\xde\x3c\x48\x55\xc4\x47\x86\x29\xc9\xf9\xc4\x4d\x31\xe7\x50\x52\x9a\x54\x07\xe7\x94\xf4\x3d\x99\xde\x93\xbc\x72\x52\xe0\x12\x75\xdd\x34\x8f\xde\xf7\x19\xe4\x8b\x9a\x72\x21\xe8\x15\x1d\xe5\x56\xd8\x80\x97\x41\x02\xb3\xb0\x15\x4a\x40\x74\xfd\x51\xa8\xdc\xfd\x29\xde\x3c\x90\x61\x72\x3f\xa0\xd1\x77\x4d\x23\x99\x4b\x02\x29\xa9\x0a\xf8\x45\xbe\x9b\x84\xc6\x45\x3d\x14\xcd\x94\x30\x23\xfe\x43\x9c\x05\x35\x9d\xfa\x80\x77\xbd\x59\xd3\x25\x48\xb7\xd6\xee\x33\x00\x00\xff\xff\x28\xa3\x8c\xc4\x1b\x03\x00\x00")

func templateGteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGteTmpl,
		"template/gte.tmpl",
	)
}

func templateGteTmpl() (*asset, error) {
	bytes, err := templateGteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gte.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xc1\x4e\xeb\x30\x10\x45\xf7\xf9\x8a\xfb\x2c\xf9\x35\x41\x6d\x3e\x00\xd4\x25\x08\x36\x88\x05\xbb\xaa\x52\xa3\x7a\x9c\x5a\xa4\x93\x62\x47\xa8\x68\xe4\x7f\x47\x76\x54\x48\x51\x81\x5d\x14\xd9\xf7\x9e\x33\xe3\x42\xc4\x90\x75\x4c\x50\x3b\x3a\xaa\x18\x0b\x11\x38\x0b\x7a\x45\x7d\xe7\xa8\x33\xcf\xef\x07\x82\x0a\x83\x77\xdc\x2a\xa8\xab\xd3\xd7\x22\xc6\x22\x9d\xf3\x1e\xd7\x4b\xb4\xc4\xdb\x1d\x6d\x5f\xea\x87\x70\x4f\xc7\x52\xc4\x59\x70\x3f\xa0\x74\xe1\x69\xf0\xa8\x51\xc5\xf8\x5f\x84\xd8\xc4\x18\x6a\x91\x31\xfb\xb1\xd9\x53\x8c\xd5\x4d\x4e\xf9\xb7\x04\xbb\x0e\x52\x00\x22\x68\x8c\xb9\xf5\xbe\x4f\x57\x15\x79\xaf\x10\x63\x91\xd9\xa8\x0b\x74\x01\x70\xb5\xfe\x44\x5c\xad\xcf\x20\x6d\xef\xe1\xd8\xd0\x71\x8e\xe0\xb8\xed\xe8\xbc\x3d\xd1\xfb\x86\x5b\xc2\x77\xae\x8c\xf2\xbb\xe2\x4f\x10\x13\xd9\x0b\x95\x7f\x09\x97\x07\xef\x78\xb0\xd8\xd8\xfd\x50\xe7\x9f\xb6\x54\x5a\x87\x95\xd6\x66\x8d\x05\xb4\x0e\x6a\x7e\xee\xa4\xc3\x3c\x65\x56\x1b\x7c\x15\x55\x69\x66\xc0\x74\x6e\xe3\x7a\x5b\x62\xf2\xcd\xe0\x7a\x1e\x1b\x4f\x7d\xe9\x05\xc0\x85\xbc\xb8\xb7\xa6\x73\x06\x3d\xc3\xa6\x38\xcc\x74\x80\x0e\x33\x35\x89\x9f\x98\x57\x63\x70\x16\x2e\x44\x16\x20\x36\x79\xf6\x1f\x01\x00\x00\xff\xff\x02\xac\x36\x31\x5e\x02\x00\x00")

func templateHexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHexTmpl,
		"template/hex.tmpl",
	)
}

func templateHexTmpl() (*asset, error) {
	bytes, err := templateHexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/hex.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLenTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\x41\x6b\xdc\x3c\x10\xbd\xef\xaf\x78\x9f\x20\xc4\xbb\x60\x2f\xc9\x57\x42\x2e\x39\xe4\xd0\xde\x1a\x72\x68\x6f\xb9\x68\xad\xb1\x2d\x2a\x4b\xae\x34\x4a\x62\x84\xff\x7b\x91\x1c\x87\x6d\xa0\xb7\x42\x2f\x9e\x27\xf4\x90\xdf\xbc\x99\xb7\x4b\x49\x51\xa7\x2d\x41\x18\xb2\x02\xf5\xb2\xec\x52\x3a\x1e\xf0\x3d\x10\x78\x20\x9c\xa2\x36\x0c\x6d\x61\xc8\xa2\x8b\xb6\x65\xed\x2c\x3a\xe7\xcb\x2d\xcf\x13\x05\xf0\x20\x19\x21\x4e\x93\xf3\x0c\xcd\x0d\x0e\xc7\x65\xd9\x01\x29\x41\x77\x70\x1e\x15\x74\xf8\x2a\x27\x34\xd8\x17\x7c\xef\xbd\x9c\xd7\x13\xfd\x44\xf3\x45\x93\x51\xdf\xe6\x89\x20\x02\x7b\x6d\x7b\xb1\x47\x35\xc8\xf0\xe8\xa9\xd3\xaf\x10\xed\x20\xad\x38\xa3\xed\x8b\x4c\xe4\xc7\xff\xab\x0c\xd9\x2a\x34\x29\xad\xd7\x0f\x72\xa4\x65\xd9\xe3\xee\x0e\x29\x35\x8f\xd2\xcb\x31\x1f\xd3\x0e\x28\x7a\xa4\x52\x9f\xbd\x77\x1e\x0d\x04\x65\x10\x9a\x07\x7a\xa9\x9e\x72\xf7\x3d\x0f\x18\x75\x18\x25\xb7\xc3\x93\xd8\x0b\x94\x9f\xac\x8d\xd4\x38\x1e\x70\xaf\x94\xb6\x3d\xda\x81\xda\x1f\xa1\x78\xa0\x2d\x53\x4f\x1e\xcf\xd2\xc4\x6c\x84\x43\xeb\xb4\x6d\xb5\x22\xbc\x68\x1e\x8a\x47\x93\xa7\x96\x14\x59\x46\x20\xc6\x69\x46\xef\xea\xc9\xc8\xb9\xf7\x2e\x5a\x75\x7c\x96\x46\x2b\xc9\xce\x9f\xb9\x46\x26\x50\xee\xee\x83\x39\xda\xb2\x28\xdf\xdb\xb5\x5c\xdd\xac\xf5\xff\xeb\xb5\xde\x7c\x12\x10\x71\x65\xc5\x37\x5a\xdc\x78\x71\x23\xc6\x8d\x79\x9a\x99\x04\x84\x8f\x96\xc4\xb9\xa3\x1f\xdd\xfc\xeb\x66\xfe\xa9\xbf\xce\x38\x99\xb5\x97\x5a\xb4\x16\x54\xc4\xb6\x6e\x9c\x0c\xbd\x9e\xe3\xab\xeb\xdb\x7f\xa1\xbb\xde\xa6\xd4\x93\x25\x2f\x73\x1e\xd6\xd7\xaa\xc9\x6b\xcb\x5d\x49\x12\x74\x80\x75\x8c\x32\x5d\xe4\xc4\x64\x5d\xb8\xbc\x08\xb8\x08\x97\xdb\x32\x67\x9d\xbf\xed\xf5\xfb\x02\x58\xf5\x16\xc5\xfa\x1d\xff\x0a\x00\x00\xff\xff\x7f\xad\xd4\xda\xab\x03\x00\x00")

func templateLenTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateLenTmpl,
		"template/len.tmpl",
	)
}

func templateLenTmpl() (*asset, error) {
	bytes, err := templateLenTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/len.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLtTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x89\xf8\x03\x52\xf8\xa3\x07\x28\xe4\xd0\x96\xf6\x18\x72\x48\x6f\x81\x20\xe2\x15\x08\x2c\x3b\x95\x04\x49\x59\xf4\xee\xc5\x76\xd2\x58\x29\x85\x5e\x7a\x33\xbb\xeb\x99\xfd\x66\xc5\x8c\x9a\xac\x6b\x09\xa2\x49\x02\xcb\x9c\x2b\x66\x38\x0b\x7a\x87\x4c\xc1\xf9\x4d\x20\xeb\xce\x10\x0b\x01\xfd\xea\xa8\xa9\xb7\x1f\x47\x52\x10\xc9\x79\xd2\x5b\xe7\x69\xfc\x09\x60\x46\x22\x7f\x6c\x4c\x1a\xb4\xf6\x63\x4f\x63\x54\xa4\x26\xd2\x45\x7d\x39\x99\xf3\xe6\xdc\xcf\x5c\x1b\xd4\xd6\xdf\xbe\xab\xaa\xd8\x71\x7f\xf3\x64\xfe\x67\x0e\x07\x8a\xb1\x0b\x78\x58\x41\x1e\x83\x6b\x93\x85\x88\x7a\x1e\xaf\xdb\xae\x8d\x27\x35\xc1\x72\x71\x93\xc2\xb0\x95\xb3\x98\x08\xe4\x8c\xd9\x0a\xad\x6b\xc0\xb8\xb8\x4f\xa3\x10\x02\x7a\x63\x82\xf1\x83\x54\x62\xbe\xa9\xe7\xdc\x9b\x0f\x71\xac\xbb\x93\x54\xfa\x6d\xfb\x2c\x55\xe5\x2c\x66\x85\x65\xce\x72\x51\x18\x2a\xe6\x3e\x95\x9c\x8b\x2a\xf3\x60\xad\x9f\xc8\x76\x81\xe4\x9d\x95\x02\x8f\x51\x9b\xba\x7e\x09\xa1\xeb\x51\xbe\xb8\xa9\x2f\x44\xbd\xa6\x93\xdc\x09\x17\x61\x6c\xa2\x80\x79\xdc\x09\x25\x20\xda\xee\x24\x54\x7f\x8d\x4b\xbc\xd7\x83\x00\xbf\xc0\xd1\x8f\x75\x2d\x99\xc7\x0c\x72\x56\x15\xf0\x97\x80\x3f\x22\x5a\x9f\xf4\x50\xb4\x05\x62\xcf\xf8\x1f\x69\x1e\x55\x79\xf7\x01\xef\xfe\x69\x95\xcf\x20\x4f\x9a\xd3\xb9\xcf\x00\x00\x00\xff\xff\x96\x4b\x8a\xcd\x19\x03\x00\x00")

func templateLtTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateLtTmpl,
		"template/lt.tmpl",
	)
}

func templateLtTmpl() (*asset, error) {
	bytes, err := templateLtTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/lt.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xc1\xca\xdb\x30\x10\x84\xef\x7e\x8a\xa9\x68\x40\x0a\x8d\x1e\xa0\x90\x43\x28\xed\x31\xe4\x90\xde\x02\x41\xc4\x2b\x10\x58\x76\x2a\x09\x92\xb2\xe8\xdd\x8b\x64\xa7\xb1\x53\x02\xbd\xfc\x37\xb3\x5a\xcf\xec\x37\xbb\xcc\x68\xc9\xba\x9e\x20\xba\x44\x02\x9b\x9c\x1b\x66\x38\x0b\xfa\x05\x99\x82\xf3\x87\x40\xd6\xdd\x21\xd6\x02\xfa\x87\xa3\xae\x3d\xfe\xbe\x92\x82\x48\xce\x93\x3e\x3a\x3f\xfd\x04\x30\x6f\x90\xc8\x5f\x3b\x93\x46\xb5\xf3\xf8\xaa\x31\x6a\x52\x17\x69\xd2\x9f\x37\x7a\x73\x2f\x3d\x8f\x07\xea\xdb\x7f\xbe\x9b\x66\x39\xe6\xf9\x69\xcb\xfc\xd9\x5c\x2e\x14\xe3\x10\xf0\x75\x0b\x79\x0d\xae\x4f\x16\x22\xea\x55\x7c\x0c\xbc\x37\x9e\xd4\x8c\xcc\xc5\x43\x0a\x75\x2c\x67\x31\x13\xc8\x19\x9f\xb6\xe8\x5d\x07\xc6\x64\x3f\x4f\x43\x08\xe8\x83\x09\xc6\x57\xa9\xc4\xfc\x54\xcf\xb9\x98\xd7\x44\xf6\xc3\x4d\x2a\xfd\xf3\xf8\x4d\xaa\xa6\xca\xcf\x1c\x73\x96\xeb\x85\x9f\x62\x2e\xa9\xe4\xbc\xa8\x32\x57\x67\xbd\xb3\x89\x82\x7c\x31\x52\xe0\x9a\x35\x4c\xdb\x7e\x0f\x61\x28\x20\x7f\xa9\xa9\x14\xa2\xde\xd3\x4d\x9e\x84\x8b\x30\x45\x01\xab\x78\x12\x4a\x40\xf4\xc3\x4d\xa8\xb2\x8c\x29\xdd\xea\xdc\x00\xff\x81\xa2\x77\x6d\x2b\x99\x47\xfe\x9c\x55\x03\x7c\x1c\xdc\x5b\x3c\xeb\x93\xae\x45\xbb\xc0\x2b\x7c\x5f\x90\x56\x51\x2d\x37\x5e\xe1\x5e\xaf\x6a\x79\x00\xf9\xdd\xc9\xfd\x09\x00\x00\xff\xff\x15\x30\xbd\x27\x18\x03\x00\x00")

func templateLteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateLteTmpl,
		"template/lte.tmpl",
	)
}

func templateLteTmpl() (*asset, error) {
	bytes, err := templateLteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/lte.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xc1\x6a\xe3\x30\x10\xbd\xfb\x2b\xde\x86\xc0\x26\xa1\xb1\x7a\x2e\x74\x0f\xdb\xa6\x4b\x0e\x4d\x61\xb7\xf4\xae\xd8\x63\x5b\x54\x96\x8c\x2c\xa7\x1b\x84\xfe\x7d\x91\xe4\xc4\xd9\xd0\x5e\x8c\xe4\x99\x79\xf3\xe6\xcd\x93\x73\x6b\x94\x54\x09\x45\x98\x35\xc4\x4b\x32\x33\xef\x33\xc6\xf0\xa0\x4b\x42\x4d\x8a\x0c\xb7\x54\x62\x7f\x0c\x97\xa2\xa1\xe2\x3d\x44\x1f\x5f\xb0\x7b\x79\xc5\xe6\x71\xfb\xfa\x2d\xcb\x3a\x5e\xbc\xf3\x9a\xe0\x5c\x3e\x1e\xbd\xcf\x32\xd1\x76\xda\x58\x2c\xb2\x59\x2d\x6c\x33\xec\xf3\x42\xb7\x8c\xef\x45\x41\xec\x04\x35\xcb\x96\x99\x73\xa4\x4a\xac\x43\xc5\x25\x99\xde\x9a\xa1\xb0\x81\x8c\x73\x73\x33\x48\x7a\xe6\x1d\xee\xee\x91\x87\x73\x1f\xf3\x19\xc3\x1b\x97\xa2\xe4\x96\x20\x7a\x70\x05\x3e\x58\xdd\x72\x2b\x0a\x2e\xe5\xf1\x82\xfd\x21\xa5\x09\xad\xd0\x92\x6d\x74\x89\xce\xe8\x83\x28\xe3\x60\x01\xe7\x44\x28\x0f\x97\x3f\x44\x68\xac\xed\xfa\x3b\xc6\xbe\xa4\x8e\x4a\x1b\xb4\xda\x10\x4a\xb2\x5c\xc8\x3e\xcf\xaa\x41\x15\x58\xf4\x70\x4e\x54\xc8\x3b\x6b\x9e\x53\x2f\xef\x57\x71\x48\xef\x9d\xcb\x15\x6f\xc9\xfb\xe5\xc4\x7c\xb1\xc4\x82\x8c\xd1\x66\x09\x97\x01\xce\xb1\x15\x5e\x94\x3c\xa2\xe5\xef\x04\xdb\x10\x62\xb4\x47\xcb\x3b\x88\x0a\x1f\xf4\xdd\x10\x6a\x2d\x54\x0d\xab\x31\xf4\x04\x61\x73\xac\x98\xf7\xb1\x7c\x1d\x92\x6a\x8b\x85\x24\x35\xaa\xb5\xc4\x6d\x14\x0c\x23\xb5\x5a\xea\x3d\x97\x4f\x5c\xc8\x27\xde\xdb\x18\x38\x70\x83\xc3\x26\x35\x3a\x8b\xf1\x76\x96\x2d\x45\x22\x00\xc9\x9e\x52\xc9\x98\x7e\x77\x1f\xa9\x2e\xbe\x2c\xbb\xc1\xed\x0d\x9c\x9b\xf8\x78\xbf\x4c\x50\x41\x93\x78\x42\xf0\xc0\x78\x66\x2b\x6c\x6d\x5c\x1c\x6c\x63\xf4\x50\x37\x51\x85\x50\x19\x35\xb0\x1a\x85\xa1\x14\x4e\xbf\xfb\x69\x7a\xc3\x55\x4d\x98\x0b\x55\xd2\xdf\x1b\xcc\x2b\x41\xb2\xbc\xb2\x0d\x10\x3b\xce\xc3\x26\x42\x28\x25\xe5\xbb\x70\xbd\x8c\xa7\x8a\x29\xe1\xf7\x35\xc2\x85\xce\xf3\x2b\x9d\x01\xc6\xf0\x73\xf3\x6b\xbb\x9b\x5a\x79\x8f\x49\x99\x7e\x04\x59\x63\x64\x6c\xb6\x23\xe5\x38\x67\xe8\x9a\xfa\x8f\x70\x11\xf0\xc4\xea\x7f\xae\x09\xe6\x81\x4b\xf9\x4a\x6d\x27\x83\x30\x09\x24\x7d\xcf\x7c\xd7\x18\x1f\x1a\x63\xd8\xec\x1e\xbf\x24\x76\x1a\xef\x62\x25\xb1\x74\x5a\x4f\xb4\x67\x7a\x05\x9f\xf9\x13\x0d\x3f\x8c\x8b\xb9\xf0\xe5\xe7\xb6\xbc\x02\xe5\x65\x39\x02\x9f\x9d\xae\xb4\x05\x97\x1f\xfc\xd8\xa3\xe2\x42\x06\xdb\x57\xbc\xbf\x74\xbc\xa8\x62\xd2\x67\xb6\x16\x15\x24\xa9\xc5\x68\xd5\x25\x7e\xdc\xc6\x47\x06\x18\xb2\x83\x51\x27\x0f\x67\x80\xbf\x72\xe4\x34\xf2\x98\xaa\x84\xcc\x7c\x76\x4a\xf9\x17\x00\x00\xff\xff\xf3\x0d\x93\xac\x38\x05\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMaxTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x6a\x1b\x31\x10\xbd\xe7\x2b\x5e\x05\x4e\x76\x0d\xd9\x90\xb4\x84\x5c\x5c\x28\xa5\x81\x1e\x1a\x7c\x68\x6f\x81\xa2\x78\x67\xbd\x43\xb5\xda\xad\xa4\x6d\x6d\x84\xfe\xbd\x48\xda\x4d\x1d\x97\x42\x7d\xed\xc5\x33\x96\xde\xce\xbc\x79\xf3\xe4\x7d\x4d\x0d\x6b\x82\xe8\xe4\x4e\xe0\x32\x84\x33\xef\xaf\x96\xf8\x62\x09\xae\x25\x3c\x8d\xac\x1c\x58\x43\x91\x46\x33\xea\x8d\xe3\x5e\xa3\xe9\x4d\xba\x75\xfb\x81\x2c\x5c\x2b\x1d\xec\x38\x0c\xbd\x71\x60\x57\x61\x79\x95\xca\x80\x1b\xf4\x06\x05\xd8\x7e\x92\x03\x2a\x94\x29\x7f\x67\x8c\xdc\xe7\x7f\xf4\x1d\xd5\x3d\x93\xaa\x3f\xef\x07\x82\xb0\xce\xb0\xde\x8a\x12\x45\x2b\xed\xda\x50\xc3\x3b\x88\x4d\x2b\xb5\x38\x80\x95\x89\x24\x62\x71\x45\xba\xb0\x95\xf7\xf9\xf2\x41\x76\x14\x42\x89\xb7\xb9\x73\xac\x1d\x8f\x20\x94\x13\x08\x61\xe5\x3d\xe9\x3a\x04\x78\x5f\xad\xa5\x91\x5d\x4c\xcf\x00\xc0\x7b\xc8\xba\xfe\x60\x4c\x6f\x50\xa1\x18\x0c\x6b\xd7\x40\x50\x3c\xb0\xd5\x03\xfd\x2c\x1e\x85\x22\xbd\x75\x2d\x1a\xc9\x8a\x6a\x6c\x5a\xda\x7c\x4b\x2a\x2c\xec\x6a\x61\x1f\x45\x29\xa6\x66\xb9\x74\x89\x44\x31\x8a\x70\x89\xab\x25\xde\x47\xbc\x4d\x1f\xb0\x76\xb4\x25\x83\x1f\x52\x8d\x64\x9f\xa5\x22\x65\x69\x62\x5d\x38\xc3\xdd\x3c\xfd\xf2\xe5\xe8\x82\xb5\x13\xe9\xf7\x2e\x87\xeb\xdb\x1c\x5f\xdf\xe4\x78\xfb\x46\x40\x8c\x19\x35\x4e\xb0\x71\xc6\x8d\x33\x70\x9c\x91\x4f\x7b\x47\x02\xc2\x8c\x9a\xc4\xa4\xab\xf7\x70\xd4\x0d\x4a\xba\x6c\x8a\xaf\x1f\x63\xb1\x0a\xa7\xf1\x6c\x54\x2f\x23\x87\x14\x53\xcf\x94\xa5\xa6\x9b\xbe\x1b\x14\xed\x0e\xf3\xeb\x9b\xbb\xbf\xf6\xbf\xcf\xa5\x5e\x30\x98\x91\x5b\xd2\x64\x64\xf4\x64\x5e\xdf\xf3\xf2\x3a\xb9\x03\x5b\xe8\xde\x45\xa5\xb9\x46\x74\x6d\xe4\x87\x8b\x85\xc5\xc2\x5e\xcc\x7c\xf3\xd6\x0e\xa8\x87\xbc\x35\xd2\xf5\xf4\x1a\x7e\xe7\x67\xb1\xff\xc1\x7b\xc9\xd2\xc4\x1b\x6e\xe0\x3d\x37\x60\xbb\x76\x06\x55\x08\xc7\xb6\xc4\xab\x15\x34\x2b\x9c\x9f\x63\x39\x19\xf1\x0f\xc8\x89\xc6\xfd\x17\xdb\x9e\xe2\xd7\xa3\x59\x8f\x46\x9d\xb6\xf0\x7f\x0e\xfb\x2b\x00\x00\xff\xff\x6f\xdb\xfc\xb9\x06\x05\x00\x00")

func templateMaxTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMaxTmpl,
		"template/max.tmpl",
	)
}

func templateMaxTmpl() (*asset, error) {
	bytes, err := templateMaxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/max.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMinTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\x41\x4f\xdc\x3c\x10\xbd\xf3\x2b\xde\x67\x69\x61\x77\x25\xb2\x82\xaf\x42\x1c\xca\x81\x43\x91\x7a\x28\xe2\xd0\xde\x90\x2a\x13\x4f\x92\x51\x1d\x3b\xb5\x1d\x60\x65\xe5\xbf\x57\xb6\x93\x76\x69\xd5\xaa\x5c\x7b\xd9\x99\xcd\x3c\xcf\x3c\xbf\x79\x3e\x8a\x51\x51\xc3\x86\x20\x7a\x36\x02\xa7\xd3\x74\x14\xe3\x6e\x8b\x4f\x9e\x10\x3a\xc2\xc3\xc8\x3a\x80\x0d\x34\x19\x34\xa3\xa9\x03\x5b\x83\xc6\xba\x5c\x0d\xfb\x81\x3c\x42\x27\x03\xfc\x38\x0c\xd6\x05\x70\xa8\xb0\xdd\xe5\x36\xdc\xc0\x3a\xac\xc1\xfe\x83\x1c\x50\x61\x93\xf3\x6b\xe7\xe4\xbe\xfc\xa3\xaf\xa8\x6e\x98\xb4\xfa\xb8\x1f\x08\xc2\x07\xc7\xa6\x15\x1b\xac\x3b\xe9\xef\x1c\x35\xfc\x0c\x51\x77\xd2\x88\x03\xd8\x26\x73\x04\xb8\x49\x94\xd6\xbe\x8a\xb1\x14\x6f\x65\x4f\xd3\xb4\xc1\xdb\x18\x53\x31\xf5\x4e\x9f\x20\xda\x20\x30\x4d\x57\x31\x92\x51\xd3\x84\x18\xab\x3b\xe9\x64\x9f\xd2\x23\x00\x88\x11\x52\xa9\x77\xce\x59\x87\x0a\xeb\xc1\xb1\x09\x0d\x04\xa5\x0f\xbe\xba\xa5\xa7\xf5\xbd\xd0\x64\xda\xd0\xa1\x91\xac\x49\xa1\xee\xa8\xfe\x92\x45\x58\xf9\xab\x95\xbf\x17\x1b\x31\x0f\x2b\xad\x37\xc8\x14\x93\x06\xa7\xd8\x6d\x71\xad\x14\x9b\xb6\x1c\xf3\xf9\x1c\x9b\x40\x2d\x39\x3c\x4a\x3d\x26\x05\x2d\x6a\xcb\xa6\x66\x45\x78\xe2\xd0\x65\x71\x07\x47\x35\x29\x32\x01\x9e\x02\x1e\xf6\x68\xed\xe9\xa0\xe5\xbe\x75\x76\x34\x6a\xf7\x28\x35\x2b\x19\xac\x5b\xe4\x06\x69\x4f\xf3\xd5\xd7\xc1\x71\xbf\x48\xb8\x7d\xa9\x9f\x60\x13\x44\xfe\xbd\x2c\xe1\xec\xa2\xc4\xff\xcf\x4b\xbc\x78\x23\x20\xc6\x82\x1a\x67\xd8\xb8\xe0\xc6\x05\x38\x2e\xc8\x87\x7d\x20\x01\xe1\x46\x43\x8b\x81\x10\xa8\x1f\xb4\x0c\xc5\x56\x9f\xdf\xa7\x56\x15\x5e\xc7\xb2\xd1\x56\x26\x06\x39\xe6\x89\x39\xcb\x23\x6b\xdb\x0f\x9a\x9e\x0f\xf3\xb3\xf3\xcb\xdf\x4c\xbf\x29\x8d\x5e\xcc\x2f\x69\x4b\x86\x9c\x4c\x8e\x2e\xdb\xff\xbe\xfb\x9e\x0d\xd8\xc3\xd8\x80\x2c\x33\x92\xe7\x13\x37\x9c\xac\x3c\x56\xfe\x64\xe1\x5a\x96\x7e\x40\x7b\x2a\x4b\x27\xa3\x66\x32\x3f\xf2\x34\xf1\xe0\xb1\x15\x55\x52\x81\x1b\xe4\xc7\xc2\xfe\x2e\x38\x54\xd3\xf4\xb3\xa9\xf1\xdf\x15\x0c\x6b\x1c\x1f\x63\x3b\xdb\xf8\x17\xc8\x2b\x6d\xff\x37\xa6\x7f\x8d\xdb\xff\x7c\xd5\x79\x05\xff\xe6\x65\xbf\x05\x00\x00\xff\xff\x59\x92\x8f\x2a\x44\x05\x00\x00")

func templateMinTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMinTmpl,
		"template/min.tmpl",
	)
}

func templateMinTmpl() (*asset, error) {
	bytes, err := templateMinTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/min.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNotnilTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8f\xb1\x6a\x43\x31\x0c\x45\xf7\x7c\xc5\xc5\x10\x92\x0c\xf1\x1f\x64\x6c\xc7\x37\x75\xcc\xe2\x62\xb9\x08\x54\x39\x58\xaf\x2d\x45\xf8\xdf\x8b\xdd\xf7\xda\x41\x70\x40\xe8\xde\x23\xf7\x4c\x85\x95\x10\xb4\xae\xca\x12\x7a\x3f\x00\xee\xe0\x02\xb6\xe5\x43\x24\xbd\x0a\x21\xe2\x3a\x17\x5c\x60\xd1\x3d\x3e\x33\x49\x5e\xd2\x3b\xf5\x8e\xdb\x0d\xca\x02\x3f\x00\xf3\x32\xe5\xfc\xd4\x5a\x6d\x88\x08\x34\xc0\xe2\x42\x5f\xe7\x7b\x60\xc3\xc2\x72\x0f\x97\x80\x19\xb6\x35\x91\x18\x61\xaf\x7d\x23\xa5\x96\x56\xae\xfa\x9b\x71\x7e\x34\xd6\xb5\xec\x7a\x60\x83\xd6\x15\x9f\x49\x38\xa3\x2a\x74\xcc\x6e\x59\x86\x15\x4e\x47\xc3\xd1\x4e\x01\xff\x96\x1b\xbe\x7c\x3f\xe8\xf2\x57\x45\x9a\x07\xbb\x5f\x27\x8e\x07\x7f\x02\x00\x00\xff\xff\x43\x97\x45\x62\x0e\x01\x00\x00")

func templateNotnilTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNotnilTmpl,
		"template/notnil.tmpl",
	)
}

func templateNotnilTmpl() (*asset, error) {
	bytes, err := templateNotnilTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/notnil.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequiredTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x92\xbf\x4f\xfb\x30\x10\xc5\xf7\xfe\x15\x4f\x37\x7d\xbf\x43\x23\xb5\xa0\xaa\x4b\x47\x18\x3b\x00\x63\x17\xb7\xb9\x54\x27\xb9\x76\xea\x1f\x85\x62\xe5\x7f\x47\x71\x92\x82\x10\x2d\x20\x84\xc4\x92\x3b\x2b\xcf\xf7\x3e\xd6\xbd\x94\x4a\xae\xc4\x30\xc8\xf1\x3e\x8a\xe3\x92\x9a\x66\x04\xa4\x04\xa9\x20\x7e\x19\xb5\x56\x6b\xcd\x28\x30\xce\x3f\xa4\x82\x2f\x52\x2a\x6e\x85\x75\xb9\x54\x3b\x6e\x1a\x2c\x16\x30\xa2\x91\x46\x40\xbe\xa9\xca\xf2\xc6\x39\xeb\x50\x80\xb8\x6d\x7c\xb1\xe4\xc7\x7f\x2b\x12\x8f\xc1\x66\x45\xff\x09\x79\x62\x6f\xc7\xda\x73\x3b\x9d\xf7\xe8\x86\x3f\x1c\x6b\x06\xf9\xe0\xc4\x6c\xe9\xb2\x3b\xd1\xef\x98\x8b\x09\x94\xbf\xf3\xae\x4c\x66\x5d\xbd\x9a\x76\x75\x76\x4d\xa0\xd8\xa9\x62\x2f\x8b\x83\x2e\x0e\xc2\x38\x28\xd7\xc7\xc0\x04\x72\xd1\xf0\xf0\xa0\x94\xb0\x65\xc3\x4e\x05\xb1\xa6\xe3\xa6\xbb\x9e\x12\xd6\x40\x4c\xe0\x2d\x3b\x1c\x94\x8e\xec\x21\x1e\xc6\x06\xf8\x58\xd7\xd6\x05\x2e\x8b\xd3\xb6\xce\xbc\xa0\xd2\x56\xb5\x74\xb9\x66\x9a\xdc\x65\x9c\x8d\xdd\xd5\x9a\x9f\xde\xf6\x93\xe9\xfc\xab\x64\x26\xee\xd8\xc9\x46\xe9\xf3\x6c\xaf\x93\xce\xd0\xad\xad\xd5\xfd\x22\x3e\xb3\x6b\xa5\xac\xcc\x77\xcc\xc4\xdf\x07\x17\x37\xe1\x94\xdd\x83\x72\x78\x66\x67\xdf\x05\x68\x38\xb6\x4c\x97\x52\xf6\xd1\xd5\x9f\xa7\xee\x8f\xa2\x99\xb2\x3d\xa7\x34\xce\x6d\x0b\xf9\x12\x00\x00\xff\xff\xc0\xa9\xdf\x62\x2b\x04\x00\x00")

func templateRequiredTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequiredTmpl,
		"template/required.tmpl",
	)
}

func templateRequiredTmpl() (*asset, error) {
	bytes, err := templateRequiredTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/required.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUuidTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xd1\x4a\xc3\x30\x14\x86\xef\xfb\x14\xbf\x81\xb8\x56\xb6\x3e\x80\xb2\x3b\x15\x76\x23\x5e\xb8\xab\x31\x58\x59\x4e\x6a\xb0\x3b\x9d\x49\x27\xca\x21\xef\x2e\x4d\x99\x76\x32\xd9\x5d\x29\xc9\xff\x7f\xdf\x39\xc9\x44\x0c\x59\xc7\x04\x75\x38\x38\xa3\x10\x63\x26\x02\x67\x41\xef\x28\x1f\x1d\x35\xe6\xe5\x6b\x4f\x50\xa1\xf3\x8e\x6b\x05\x75\x73\xfc\x9a\xc5\x98\xf5\xe7\xbc\xc7\xed\x1c\x35\xf1\xf6\x95\xb6\x6f\xe5\x22\x2c\x97\x8b\xfb\x5c\xc4\x59\x70\xdb\x21\x77\xe1\xb9\xf3\x28\x51\xc4\x78\x2d\x42\x6c\x62\x0c\xa5\xc8\x10\xfe\x54\xed\x28\xc6\xe2\x2e\xc5\x5c\xcd\xc1\xae\x81\x64\x80\x08\x2a\x63\x1e\xbc\x6f\xfb\xab\x8a\xbc\x4f\x68\x09\x8e\x9a\x40\x67\x08\x57\xeb\x1f\xc6\xd5\xfa\x84\xd2\xb6\x1e\x8e\x0d\x7d\x4e\x11\x1c\xd7\x0d\x9d\xb6\xf7\xf8\xbe\xe2\x9a\xf0\x97\x2b\xa1\x5c\x70\xfc\x8f\x62\x64\x7b\xa6\xf3\x92\x71\xbe\xf7\x8e\x3b\x8b\x8d\xdd\x75\x65\xfa\x69\x73\xa5\x75\x58\x69\x6d\xd6\x98\x41\xeb\xa0\xa6\xa7\x52\x3a\x4c\xfb\xcc\x62\x83\xdf\xa2\xa2\x1f\x1a\x30\x1e\xdc\xb0\xe0\x9a\x98\x7c\xd5\xb9\x96\x87\xc6\x63\x5f\x7a\x05\x70\x21\xad\xee\xa3\x6a\x9c\x41\xcb\xb0\x7d\x1e\x26\x3a\x40\x87\x89\x1a\xe5\x8f\xd4\x8b\x21\x39\x19\x67\x22\x33\x10\x9b\x34\xfd\xef\x00\x00\x00\xff\xff\x5e\xac\xf6\xce\x63\x02\x00\x00")

func templateUuidTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUuidTmpl,
		"template/uuid.tmpl",
	)
}

func templateUuidTmpl() (*asset, error) {
	bytes, err := templateUuidTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/uuid.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/bcp47.tmpl":       templateBcp47Tmpl,
	"template/contains.tmpl":    templateContainsTmpl,
	"template/containsany.tmpl": templateContainsanyTmpl,
	"template/dive.tmpl":        templateDiveTmpl,
	"template/gt.tmpl":          templateGtTmpl,
	"template/gte.tmpl":         templateGteTmpl,
	"template/hex.tmpl":         templateHexTmpl,
	"template/len.tmpl":         templateLenTmpl,
	"template/lt.tmpl":          templateLtTmpl,
	"template/lte.tmpl":         templateLteTmpl,
	"template/main.tmpl":        templateMainTmpl,
	"template/max.tmpl":         templateMaxTmpl,
	"template/min.tmpl":         templateMinTmpl,
	"template/notnil.tmpl":      templateNotnilTmpl,
	"template/required.tmpl":    templateRequiredTmpl,
	"template/uuid.tmpl":        templateUuidTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": {nil, map[string]*bintree{
		"bcp47.tmpl":       {templateBcp47Tmpl, map[string]*bintree{}},
		"contains.tmpl":    {templateContainsTmpl, map[string]*bintree{}},
		"containsany.tmpl": {templateContainsanyTmpl, map[string]*bintree{}},
		"dive.tmpl":        {templateDiveTmpl, map[string]*bintree{}},
		"gt.tmpl":          {templateGtTmpl, map[string]*bintree{}},
		"gte.tmpl":         {templateGteTmpl, map[string]*bintree{}},
		"hex.tmpl":         {templateHexTmpl, map[string]*bintree{}},
		"len.tmpl":         {templateLenTmpl, map[string]*bintree{}},
		"lt.tmpl":          {templateLtTmpl, map[string]*bintree{}},
		"lte.tmpl":         {templateLteTmpl, map[string]*bintree{}},
		"main.tmpl":        {templateMainTmpl, map[string]*bintree{}},
		"max.tmpl":         {templateMaxTmpl, map[string]*bintree{}},
		"min.tmpl":         {templateMinTmpl, map[string]*bintree{}},
		"notnil.tmpl":      {templateNotnilTmpl, map[string]*bintree{}},
		"required.tmpl":    {templateRequiredTmpl, map[string]*bintree{}},
		"uuid.tmpl":        {templateUuidTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
