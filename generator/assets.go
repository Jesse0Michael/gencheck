// Code generated by go-bindata.
// sources:
// template/bcp47.tmpl
// template/dive.tmpl
// template/hex.tmpl
// template/len.tmpl
// template/main.tmpl
// template/notnil.tmpl
// template/required.tmpl
// template/uuid.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBcp47Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xc1\x6b\x14\x31\x18\xc5\xef\xf3\x57\x3c\x03\xb1\x3b\xcb\x76\xe6\x52\x28\x54\x7a\x50\x51\xe9\x45\x7a\x10\x2f\xcb\x42\xd3\xc9\x97\xd9\x60\x36\x19\x93\x50\x2d\x21\xff\xbb\x24\x71\x75\x2b\x95\x9e\x66\xf8\x48\xde\xfb\xbd\x7c\x2f\xa5\x71\xdd\x01\xef\xde\xdf\x5e\x5c\x7e\x15\x46\x4b\x11\x9d\xc7\x4c\x96\xbc\x88\x14\x30\x39\x49\x88\x7b\x11\xf1\x43\x1b\x83\x07\xf2\x5a\x3d\x42\x2b\x08\x28\x4d\x46\x42\x07\x88\x76\x1d\x93\x3b\x2c\x22\xea\x7b\x43\x08\xd1\x6b\x3b\x77\xc0\x3e\xc6\x25\x5c\x8d\x63\x74\xce\x84\x41\x53\x54\x83\xf3\xf3\xb8\x8f\x07\x33\xde\x4f\xcb\xc5\x65\xb7\x1e\x73\xee\x52\x92\xa4\xb4\x25\xb0\x3a\x64\x75\x54\x6c\xe8\x3b\x86\x8f\xc5\xe8\xcb\xe3\x42\x60\x4d\x97\x81\xad\x8f\x7f\x39\x77\xe5\x98\xf7\xb8\xba\x2e\xdc\xd3\x9e\xa6\x6f\xc3\x4d\xa8\x48\xab\x94\xb4\x82\x75\x11\xab\x9b\x70\x1b\x3d\x06\xf4\x39\xbf\x4e\x89\xac\xcc\x39\x0c\x29\x35\xf1\xcf\xe2\x40\x39\xf7\x6f\xaa\xce\xab\x6b\x58\x6d\x90\x3a\x20\x25\xbc\x95\xf2\x83\xf7\xae\x5c\x65\xe4\x7d\x35\xac\x70\x64\x02\x3d\x43\xb8\xdd\xfd\x61\xdc\xee\x8e\x94\x39\x77\xca\x79\x68\x2b\xe9\xe7\x06\x41\xdb\xd9\xd0\x53\xef\x42\xef\x85\x9d\x09\xff\x52\x55\x90\x97\x22\xfe\x0f\xe2\x24\xec\x33\xa6\x2f\x05\x5e\x2d\x5e\xdb\xa8\x70\xa7\x0e\x71\xa8\x43\xb5\x62\x9c\x87\x2d\xe7\x72\x87\x73\x70\x1e\xd8\xe6\x69\x2a\x1e\x36\x45\xb3\xbf\xc3\x5f\xa3\xbe\xbc\x19\x70\xfa\x6e\x6d\xbf\x9f\x5a\xcd\xb4\xb3\xcd\xf1\xe8\xd7\x4a\x50\xaa\x55\x56\xf7\x50\x6a\x09\x67\x7f\x17\xee\x8c\x07\xf0\x70\xc6\x4e\x0c\x4e\xb2\xf7\x4d\xba\x46\x6e\x5f\x9c\xe7\xdc\xfd\x0a\x00\x00\xff\xff\xdf\xbb\xa8\xb6\xe7\x02\x00\x00")

func templateBcp47TmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBcp47Tmpl,
		"template/bcp47.tmpl",
	)
}

func templateBcp47Tmpl() (*asset, error) {
	bytes, err := templateBcp47TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/bcp47.tmpl", size: 743, mode: os.FileMode(420), modTime: time.Unix(1478279289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDiveTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x32\xb0\xec\xcc\xc2\xce\xde\x95\x3d\x08\xfe\xe0\x45\x04\xc5\x7b\x98\x74\xb4\x31\x66\x96\x24\xae\x48\xd3\xef\x2e\x33\xb3\x3f\xa0\xb7\xee\xa6\xba\xea\xa3\x44\x36\x2b\x03\x78\xde\x13\xbe\x39\x46\xf4\x2e\x46\xbc\x51\xea\xdf\xa9\xff\xc0\xde\x45\xf6\xae\x12\x86\x04\x87\x52\xf3\x57\x5f\x0d\xb0\xda\xa8\x1a\x11\x4f\x81\x13\xc1\x8e\xdf\x76\xba\x80\x03\x86\x8c\x86\xcb\xf3\xa4\x45\xd7\x9e\x97\xa7\x9a\xd1\xb5\x27\xdd\x43\x99\x0e\x50\xe5\x80\xd2\x89\x74\x77\x4c\xd1\x3f\xba\x4f\x52\xc5\xc5\x16\x89\x23\x04\x22\x6b\x50\xf2\xaa\x86\x03\x28\x67\x5c\x6e\x4f\x7c\xdd\xeb\x81\xaf\xf9\xfb\xdf\x5e\x4d\xda\xa3\x8b\x01\x44\x70\xed\xfd\x6d\xce\xc3\x18\x6a\x29\x67\x0b\x55\xf3\x9f\x46\x45\xe6\x3c\x11\x50\x2c\x84\x79\xbc\xa7\x44\xd9\x55\x1e\xd2\xec\xd1\xec\x32\xa7\x1a\x60\x6f\xc6\xee\xb8\x20\x0d\x75\xee\x6b\x2c\x2b\x8c\x28\x58\x2e\x0a\x16\x65\x69\x71\x46\x3b\x8c\x2f\x3f\x3b\x6a\x67\xe7\x63\x18\x25\x8f\xb5\xaa\xf9\x0d\x00\x00\xff\xff\x55\x4c\xb2\xa4\x93\x01\x00\x00")

func templateDiveTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDiveTmpl,
		"template/dive.tmpl",
	)
}

func templateDiveTmpl() (*asset, error) {
	bytes, err := templateDiveTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dive.tmpl", size: 403, mode: os.FileMode(420), modTime: time.Unix(1478266418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x4d\x4e\xc3\x30\x10\x85\xf7\x39\xc5\xc3\x92\x69\x82\xda\x1c\x00\xd4\x05\x0b\x7e\xba\x41\x2c\xd8\x55\x95\x1a\xd5\xe3\xd4\x22\x75\x8a\x1d\xa1\xa2\xd1\xdc\x1d\xc5\x51\x21\x45\x05\x56\x89\x2c\xfb\xbd\xef\x9b\xc9\x98\x0d\x59\xe7\x09\x6a\x4b\x07\x25\x92\x31\xc3\x59\xd0\x1b\xca\x7b\x47\x8d\x79\xf9\xd8\x13\x54\xec\x82\xf3\xb5\x82\xba\x3a\xfe\x89\x64\xfd\xb5\x10\x70\x3d\x47\x4d\x7e\xb3\xa5\xcd\x6b\xb9\x88\x8f\x74\xc8\x99\x9d\x85\x6f\x3b\xe4\x8b\xf8\xdc\x05\x94\x28\x44\x2e\x99\xc9\x1b\x91\x58\x32\x0f\xd1\x4f\xd5\x8e\x44\x8a\x9b\x94\x72\x31\x87\x77\x0d\x38\x03\x98\x71\x6b\xcc\x5d\x08\x6d\xff\x54\x51\x08\xa9\x2e\xa1\x51\x13\xe9\x0c\xdf\x72\xf5\x45\xb8\x5c\x1d\x19\x45\x32\xdb\x06\x38\x6f\xe8\x30\x45\x74\xbe\x6e\xe8\xb4\xbb\x67\x0f\x95\xaf\x09\x3f\xa9\x12\xc8\xdf\x82\xbf\x21\x8c\x54\xcf\x54\xfe\xa7\x9b\xef\x83\xf3\x9d\xc5\xda\xee\xba\x32\x1d\xda\x5c\x69\x1d\x97\x5a\x9b\x15\x66\xd0\x3a\xaa\xe9\xa9\x93\x8e\xd3\x3e\xb3\x58\xe3\xbb\xa8\xe8\x27\x06\x8c\xa7\x36\xec\xf6\x81\x3c\x85\xaa\x73\xad\x1f\x1a\x8f\x7d\xfd\xfa\xe1\x62\x5a\xdb\x7b\xd5\x38\x83\xd6\xc3\xf6\x71\x98\xe8\x08\x1d\x27\x6a\x14\x3f\x32\x2f\x86\xe0\x24\x3c\x7c\x31\x13\xc9\x3e\x03\x00\x00\xff\xff\x47\xe5\x88\x14\x59\x02\x00\x00")

func templateHexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHexTmpl,
		"template/hex.tmpl",
	)
}

func templateHexTmpl() (*asset, error) {
	bytes, err := templateHexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/hex.tmpl", size: 601, mode: os.FileMode(420), modTime: time.Unix(1478279255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLenTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x53\xb1\x6e\xdc\x3a\x10\xec\xf5\x15\xf3\x08\x18\x96\x0c\x58\x07\xfb\x05\x86\x1b\x17\x57\x24\xa9\x62\xb8\x48\x3a\x37\x3c\x71\x25\x11\xa1\x48\x85\x5c\xda\x16\x08\xfd\x7b\x40\xea\x2e\x38\x18\x41\x8a\x14\x69\xb4\x43\x70\x30\x9a\x9d\x5d\x56\x29\x29\xea\xb5\x25\x08\x43\x56\xac\x6b\x95\xd2\xee\x0a\xdf\x02\x81\x47\xc2\x21\x6a\xc3\xd0\x16\x86\x2c\xfa\x68\x3b\xd6\xce\xa2\x77\xbe\xdc\xf2\x32\x53\x00\x8f\x92\x11\xe2\x3c\x3b\xcf\xd0\xdc\xe2\x6a\x57\x64\xa0\x7b\x38\x8f\x1a\x3a\x7c\x91\x33\x5a\x34\x05\xef\xbd\x97\xcb\x76\xa2\x1f\x68\x3f\x69\x32\xea\xeb\x32\x13\x44\x60\xaf\xed\x20\x1a\xd4\xa3\x0c\x4f\x9e\x7a\xfd\x06\xd1\x8d\xd2\x8a\x33\x5a\xb3\xae\x15\xb2\xf4\x7f\xb5\x21\x5b\x87\x36\xa5\xed\xf2\x51\x4e\xb4\xae\x0d\x1e\x1e\x90\x52\xfb\x24\xbd\x9c\xf2\x31\x55\x00\x90\x12\xf6\x4a\x7d\xf4\xde\x79\xb4\x10\x94\x41\x68\x1f\xe9\xb5\x7e\xce\x7d\x0f\x3c\x62\xd2\x61\x92\xdc\x8d\xcf\xa2\x11\x28\x3f\x39\x66\xb1\x57\x4a\xdb\x01\xdd\x48\xdd\xf7\x50\x7a\xd7\x96\x69\x20\x8f\x17\x69\x62\x0e\xc0\xa1\x73\xda\x76\x5a\x11\x5e\x35\x8f\x25\x9b\xd9\x53\x47\x8a\x2c\x23\x10\xe3\xb0\x60\x70\xd7\xb3\x91\xcb\xe0\x5d\xb4\x6a\xf7\x22\x8d\x56\x92\x9d\xff\x95\x16\x99\x40\xb9\xaf\x77\xa1\x68\xcb\xa2\x7c\xef\xb7\x72\x73\xb7\xd5\xff\x6f\xb7\x7a\xf7\x41\x40\xc4\x8d\x15\x8f\xb4\x78\xe2\xc5\x13\x31\x9e\x98\x87\x85\x49\x40\xf8\x68\x29\x0f\xbb\xe4\xf8\x3e\xc3\xdf\x45\xf8\x17\x01\xfe\xa9\xab\xde\x38\x99\x1d\x97\x5a\x1c\x16\x54\x2c\x76\x6e\x9a\x0d\xbd\x9d\xe3\x9b\xdb\xfb\x22\xf9\x6f\xec\x6e\xf3\xf8\x4c\x96\xbc\xcc\xfb\xbe\xc9\xd4\xb3\xd7\x96\xfb\xf2\x4e\xa0\x03\xac\x63\x94\x29\x22\xbf\x88\x6c\x07\x97\x17\x01\x17\xe1\xf2\xb4\xae\xd9\xde\xf9\xe6\x1e\x85\xc9\xaa\x0d\x65\x70\xbd\xae\xd5\xcf\x00\x00\x00\xff\xff\xcc\x41\x1f\xc4\x84\x03\x00\x00")

func templateLenTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateLenTmpl,
		"template/len.tmpl",
	)
}

func templateLenTmpl() (*asset, error) {
	bytes, err := templateLenTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/len.tmpl", size: 900, mode: os.FileMode(420), modTime: time.Unix(1478280759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\x8f\x60\xa8\x1d\xd6\xf6\x9e\x17\xb6\x87\xb6\xa1\xe4\xb0\x29\x94\xd2\xbb\xd6\x1e\xdb\x22\xb2\x6c\x64\x39\x6d\x11\xfa\xee\x45\x7f\xbc\x09\x61\xf7\x62\x8c\x66\xf4\x9b\xf7\x46\xcf\xda\x12\x2d\x75\x42\x11\x76\x03\xf1\x96\xf4\xce\x39\x36\xf3\xe6\xcc\x7b\x82\xb5\x55\xfa\x75\x8e\x31\x31\xce\x93\x36\xc8\xd9\xae\x17\x66\x58\x5f\xab\x66\x1a\x6b\xfe\x2a\x1a\xaa\x7b\x52\xcd\x40\xcd\x79\xc7\x0a\x66\x2d\xa9\x16\xa5\xbf\x71\x4b\x5f\x8c\x5e\x1b\xe3\xe9\xd6\x66\x7a\x95\xf4\xc2\x67\x3c\x3d\xa3\xf2\xff\x4b\xe8\xef\x56\xd5\x20\x5f\x60\xad\xe8\x50\xcd\x46\xbf\x90\x19\xa6\x16\xce\xed\x03\xd4\x39\x6b\x2b\xc5\x47\x72\xae\xc0\x6f\x2e\x45\xcb\x0d\x21\x2f\x90\x93\xd6\x93\x2e\x60\x19\x60\x6d\xbd\xc7\x0f\x25\xff\x61\xe4\x67\x82\x19\x08\xa1\xba\x60\xe4\x33\x44\x87\x3f\xf4\x49\x13\xfa\x49\xa8\x1e\x66\xc2\xba\x10\x84\xa9\xb0\xaf\x9d\x0b\xd7\x4b\xdf\xd4\x1b\xe4\x92\x54\x52\x57\xe0\x31\x08\x04\x2e\x5c\xe3\x72\x88\xbc\xcd\x74\x95\xa4\x88\x49\xc5\x4a\xc0\xc0\x6f\x21\x21\xeb\x3d\x8e\x86\xb4\x57\x6b\x06\x3d\xad\xfd\x10\x74\x79\x76\x50\x65\x26\x34\x9a\x62\x39\x1e\x2f\x57\x3d\x9a\xab\x9e\x90\x79\xdf\x0f\xc8\x3a\x41\xb2\xbd\xdb\x1b\x10\x06\x66\xf1\xe4\xe9\x39\x75\x55\x3f\xef\x3b\x6e\x8c\x65\x77\xc6\x80\xba\xc6\x97\xc3\xf7\xe3\x29\xa0\xfc\x34\x38\x87\xab\xb5\x25\x41\x4a\x24\x41\xfa\xa8\x5a\xfa\xfb\x10\x49\x61\x6a\x9c\x9f\x70\x01\xb8\xa9\xaa\x4e\x9e\x57\xbe\x95\x3c\xe6\x2b\x97\xf2\x17\x8d\xb3\xf4\xbe\x23\x24\x7e\xdf\xf4\x96\x08\x8f\xbe\xa9\x3b\x9c\xbe\x7d\xa8\x6d\x73\x78\xb3\xf4\xeb\xed\x6b\x24\xc2\x7b\xbd\x9b\x09\x0c\xfc\x92\x56\x7f\x93\x85\xf7\xa3\x10\x8a\xa2\x83\x24\x95\xa7\x30\x14\xf8\xfc\x18\xe2\x07\x68\x32\xab\x56\x5b\x4a\x18\x70\x2f\x27\x35\x28\x21\x99\x63\x29\xd8\xec\x7f\x00\x00\x00\xff\xff\x8c\x21\xa2\xf8\x89\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 905, mode: os.FileMode(420), modTime: time.Unix(1478280048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNotnilTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x43\x31\x10\x45\xf7\xef\x2b\x2e\x81\xd2\x76\x61\xfe\xa0\x0b\x17\x2a\x6e\xde\xca\x65\x37\x91\x4c\x60\x60\x9c\x94\x4c\x54\x64\xc8\xbf\x4b\xda\x3e\x5d\x04\x0e\x81\xb9\xe7\xb8\x67\x2a\xac\x84\xa0\xb5\x2b\x4b\x18\x63\x01\xdc\xc1\x05\xaf\xb6\x7e\x8a\xa4\x77\x21\x44\x5c\xff\xb9\xc0\xa2\x7b\x7c\x66\x92\xbc\xa6\x0f\x1a\x03\xa7\x13\x94\x05\xbe\x00\xd7\xc3\xc7\x9c\x9f\x5a\xab\x0d\x11\x81\x26\x58\x5c\xe9\xfb\x70\x0e\x6c\x58\x59\xce\xe1\x18\x6e\x63\x77\x11\x89\x11\x36\xeb\x0b\x29\xb5\xd4\xb9\xea\x6d\xe3\x70\x69\xac\xbd\x6c\x75\x60\x83\xd6\x8e\xaf\x24\x9c\x51\x15\x3a\xdf\x16\x59\x66\x15\xf6\x3b\xc3\xce\xf6\x01\xff\x95\x77\x7c\xfb\xb9\xd0\xf1\x4f\x45\x9a\x27\xbb\x4f\x78\x18\x63\xf9\x0d\x00\x00\xff\xff\x55\x02\x4f\x4d\x0b\x01\x00\x00")

func templateNotnilTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNotnilTmpl,
		"template/notnil.tmpl",
	)
}

func templateNotnilTmpl() (*asset, error) {
	bytes, err := templateNotnilTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/notnil.tmpl", size: 267, mode: os.FileMode(420), modTime: time.Unix(1478280768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequiredTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x92\x31\x4f\x23\x31\x10\x85\xfb\xfc\x8a\xd1\x54\x77\xc5\xad\x94\x1c\x8a\xd2\xa4\xa0\x00\x44\x93\x02\x28\xd3\x38\xd9\xd9\x68\x24\xc7\xde\x8c\xed\x40\xb0\xf6\xbf\x23\xdb\xbb\x11\x42\x10\x22\x10\x12\xcd\xce\x78\xf5\xfc\xde\x27\xeb\xc5\x58\x53\xc3\x86\x00\x85\x76\x81\x85\x6a\xec\xba\x11\x40\x8c\xc0\x0d\xdc\xba\x45\xd0\x5a\xad\x34\x41\x05\xf9\x3f\x37\xe0\xaa\x18\xab\x6b\x26\x5d\x2f\xd4\x96\xba\x0e\xe6\x73\x30\xac\x21\x8e\x00\xf2\xc5\xcb\xba\xbe\x12\xb1\x02\x15\x20\xa5\xc5\x55\x0b\x7a\xfc\xb3\x44\x76\x30\xa4\x2c\xf1\x2f\x16\xc7\x3e\x8d\xb4\xa3\xe4\x4e\x3b\x28\xe6\x0f\x87\x96\x00\x9d\x17\x36\x1b\x3c\x19\x8e\xf8\x33\xd9\x6c\x3c\xe6\xef\xac\x8c\xf1\xb4\xcc\xff\x93\x32\xa7\x17\x08\x18\x8a\x2a\xf4\xb2\x30\xe8\xc2\x20\x0c\x83\x72\x75\xf0\x84\x80\x12\x0c\x1d\xdf\xf8\x86\x0c\x89\xf2\x6c\x4d\xa1\xc6\xbb\x9e\x11\xac\x01\x36\x9e\x36\x24\xb0\x57\x3a\x90\x03\x76\x60\xac\x07\x17\xda\xd6\x8a\xa7\xba\x3a\xba\x7c\xc0\xdf\x68\xab\x12\x5b\x9e\x99\x25\x6f\x19\x66\x6d\xb7\xad\xa6\xa7\xd7\xfb\x78\x32\xeb\x9f\xe5\x33\x30\x13\xb6\x24\xbc\x56\xfa\xcb\x68\x2b\x6b\xf5\x99\x61\x49\x4a\xca\x9c\x1f\xc5\xee\xde\x4b\x58\xfb\xa1\xb2\x7b\x25\xf0\x4c\x62\xdf\x14\x67\x38\x26\xa0\x53\xed\x7a\xef\xea\xf7\xdb\xf6\x3b\xc9\x4c\x9d\xce\x31\xa6\xe5\x5f\xd7\x8d\x5e\x02\x00\x00\xff\xff\x27\x20\x7c\xc5\x1e\x04\x00\x00")

func templateRequiredTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequiredTmpl,
		"template/required.tmpl",
	)
}

func templateRequiredTmpl() (*asset, error) {
	bytes, err := templateRequiredTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/required.tmpl", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1478280773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUuidTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xcd\x6a\xeb\x30\x10\x85\xf7\x7e\x8a\x73\x05\xba\xb1\x2f\x89\x1f\xe0\x96\x2c\x0a\xfd\x21\x9b\xd2\x45\xb3\x0a\x81\x98\x68\xe4\x8a\x3a\x72\x2a\x39\xa5\x65\x98\x77\x2f\x96\x49\xeb\x94\x94\xac\x6c\x8c\x75\xce\xf7\xcd\x28\x63\x36\x64\x9d\x27\xa8\xc3\xc1\x19\x25\x92\x31\xc3\x59\xd0\x2b\xca\x3b\x47\x8d\x79\xfa\xd8\x13\x54\xec\x82\xf3\xb5\x82\xfa\x77\x7c\x13\xc9\xfa\xdf\x42\xc0\xff\x39\x6a\xf2\xdb\x67\xda\xbe\x94\x8b\xb8\x5c\x2e\x6e\x72\x66\x67\xe1\xdb\x0e\xf9\x22\x3e\x76\x01\x25\x0a\x91\xbf\xcc\xe4\x8d\x48\x2c\x99\x87\xec\x87\x6a\x47\x22\xc5\x55\x8a\xf9\x33\x87\x77\x0d\x38\x03\x98\x71\x6d\xcc\x6d\x08\x6d\x7f\x54\x51\x08\xa9\x2f\xb1\x51\x13\xe9\x0c\xe0\x6a\xfd\x85\xb8\x5a\x1f\x21\x45\x32\xdb\x06\x38\x6f\xe8\x7d\x8a\xe8\x7c\xdd\xd0\x69\x77\x0f\x1f\x2a\x5f\x13\x7e\x52\x25\x90\x0b\x86\xbf\x31\x8c\x5c\xcf\x74\x5e\xf2\xcd\xf7\xc1\xf9\xce\x62\x63\x77\x5d\x99\x3e\xda\x5c\x69\x1d\x57\x5a\x9b\x35\x66\xd0\x3a\xaa\xe9\xa9\x94\x8e\xd3\x3e\xb3\xd8\xe0\xbb\xa8\xe8\x47\x06\x8c\xc7\x36\x6c\xf7\x9e\x3c\x85\xaa\x73\xad\x1f\x1a\x8f\x7d\xe9\x06\xc0\xc5\xb4\xb8\xb7\xaa\x71\x06\xad\x87\xed\xf3\x30\xd1\x11\x3a\x4e\xd4\x28\x7f\xa4\x5e\x0c\xc9\xc9\x78\x78\x62\x26\x92\x7d\x06\x00\x00\xff\xff\xc1\x78\xc3\x6d\x5d\x02\x00\x00")

func templateUuidTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUuidTmpl,
		"template/uuid.tmpl",
	)
}

func templateUuidTmpl() (*asset, error) {
	bytes, err := templateUuidTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/uuid.tmpl", size: 605, mode: os.FileMode(420), modTime: time.Unix(1478279216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/bcp47.tmpl": templateBcp47Tmpl,
	"template/dive.tmpl": templateDiveTmpl,
	"template/hex.tmpl": templateHexTmpl,
	"template/len.tmpl": templateLenTmpl,
	"template/main.tmpl": templateMainTmpl,
	"template/notnil.tmpl": templateNotnilTmpl,
	"template/required.tmpl": templateRequiredTmpl,
	"template/uuid.tmpl": templateUuidTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"bcp47.tmpl": &bintree{templateBcp47Tmpl, map[string]*bintree{}},
		"dive.tmpl": &bintree{templateDiveTmpl, map[string]*bintree{}},
		"hex.tmpl": &bintree{templateHexTmpl, map[string]*bintree{}},
		"len.tmpl": &bintree{templateLenTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
		"notnil.tmpl": &bintree{templateNotnilTmpl, map[string]*bintree{}},
		"required.tmpl": &bintree{templateRequiredTmpl, map[string]*bintree{}},
		"uuid.tmpl": &bintree{templateUuidTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

